Index: src/test/java/brique/GameControllerTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package brique;\r\n\r\nimport brique.controller.GameController;\r\nimport brique.model.Board;\r\nimport brique.model.Move;\r\nimport brique.model.Player;\r\nimport brique.model.UnadmissibleMove;\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\n\r\nimport static org.junit.jupiter.api.Assertions.*;\r\n\r\n\r\npublic class GameControllerTest {\r\n\r\n    @Test\r\n    public void firstPlayerStartsTheGame() {\r\n        Player player_1 = new Player(\"Player_1\");\r\n        Player player_2 = new Player(\"Player_2\");\r\n        GameController gamecontroller = new GameController(player_1,player_2);\r\n\r\n        assertEquals(player_1, gamecontroller.currentPlayer());\r\n    }\r\n\r\n    @Test\r\n    public void boardInitialized() {\r\n        Player player_1 = new Player(\"Player_1\");\r\n        Player player_2 = new Player(\"Player_2\");\r\n\r\n        GameController gamecontroller = new GameController(player_1,player_2);\r\n\r\n        assertNotNull(gamecontroller.board());\r\n    }\r\n\r\n    @Test\r\n    public void boardIsEmptyAtStart() {\r\n        Player player_1 = new Player(\"Player_1\");\r\n        Player player_2 = new Player(\"Player_2\");\r\n\r\n        GameController game = new GameController(player_1,player_2);\r\n        Board board = game.board();\r\n\r\n        for (int row = 0; row< board.getRows(); row++) {\r\n            for (int col = 0; col < board.getCols(); col++) {\r\n                assertTrue(board.isFree(row, col),\r\n                        \"Expected cell (\" + row + \",\" + col + \") to be free\");\r\n            }\r\n        }\r\n    }\r\n\r\n    @Test\r\n    public void currentTurnCounter() {\r\n        Player player_1 = new Player(\"Player_1\");\r\n        Player player_2 = new Player(\"Player_2\");\r\n\r\n        GameController game = new GameController(player_1,player_2);\r\n\r\n        assertEquals(1, game.currentTurn());\r\n    }\r\n\r\n    @Test\r\n    public void alternatePlayerTurn() {\r\n        Player player_1 = new Player(\"Player_1\");\r\n        Player player_2 = new Player(\"Player_2\");\r\n        GameController game = new GameController(player_1,player_2);\r\n\r\n        assertEquals(player_1, game.currentPlayer());\r\n\r\n        game.setTurnForTest(2);\r\n        assertEquals(player_2, game.currentPlayer());\r\n    }\r\n\r\n    @Test\r\n    public void playerCanPlaceStoneFreeCell() throws UnadmissibleMove {\r\n        Player player_1 = new Player(\"Player_1\");\r\n        Player player_2 = new Player(\"Player_2\");\r\n        GameController game = new GameController(player_1,player_2);\r\n\r\n        assertTrue(game.makeMove(new Move(0,0,game.currentPlayer())));\r\n\r\n        assertEquals(player_1, game.board().getPlayerAt(0,0));\r\n\r\n    }\r\n\r\n    @Test\r\n    public void turnIncreasesAfterTurn() throws UnadmissibleMove {\r\n        Player player_1 = new Player(\"Player_1\");\r\n        Player player_2 = new Player(\"Player_2\");\r\n        GameController game = new GameController(player_1,player_2);\r\n\r\n        assertEquals(1, game.currentTurn());\r\n        assertTrue(game.makeMove(new Move(0,0,game.currentPlayer())));\r\n        assertEquals(2, game.currentTurn());\r\n        assertTrue(game.makeMove(new Move(0,1,game.currentPlayer())));\r\n        assertEquals(3, game.currentTurn());\r\n    }\r\n\r\n    @Test\r\n    public void currentPlayerChangeAfterMove() throws UnadmissibleMove {\r\n        Player player_1 = new Player(\"Player_1\");\r\n        Player player_2 = new Player(\"Player_2\");\r\n        GameController game = new GameController(player_1,player_2);\r\n\r\n        assertEquals(player_1, game.currentPlayer());\r\n        assertTrue(game.makeMove(new Move(0,0, game.currentPlayer())));\r\n        assertEquals(player_2, game.currentPlayer());\r\n    }\r\n\r\n    @Test\r\n    public void moveWrongIsRejected() throws UnadmissibleMove {\r\n        Player player_1 = new Player(\"Player_1\");\r\n        Player player_2 = new Player(\"Player_2\");\r\n        GameController game = new GameController(player_1,player_2);\r\n\r\n        Move invalidMove = new Move(0,0,player_2);\r\n        assertThrows(UnadmissibleMove.class, () -> game.makeMove(invalidMove));\r\n    }\r\n\r\n    @Test\r\n    public void placeStoneOnOccupiedCell() throws UnadmissibleMove {\r\n        Player player_1 = new Player(\"Player_1\");\r\n        Player player_2 = new Player(\"Player_2\");\r\n        GameController game = new GameController(player_1,player_2);\r\n\r\n        assertDoesNotThrow(() -> game.makeMove(new Move(0,0,player_1)));\r\n        assertThrows(UnadmissibleMove.class, () -> game.makeMove(new Move(0,0,player_2)));\r\n\r\n    }\r\n\r\n    @Test\r\n    public void pieRuleSuccess() throws UnadmissibleMove {\r\n        Player player_1 = new Player(\"Player_1\");\r\n        Player player_2 = new Player(\"Player_2\");\r\n        GameController game = new GameController(player_1, player_2);\r\n\r\n        game.makeMove(new Move(0, 0, player_1));\r\n        assertTrue(game.pieRuleAvailable());\r\n        game.applyPieMove();\r\n\r\n        Player new_player_1 = game.getFirstPlayer();\r\n        Player new_player_2 = game.getSecondPlayer();\r\n\r\n        assertEquals(player_2, new_player_1);\r\n        assertEquals(player_1, new_player_2);\r\n\r\n        assertEquals(game.currentPlayer(), new_player_2);\r\n        assertEquals(game.board().getPlayerAt(0,0), new_player_1);\r\n    }\r\n\r\n    @Test\r\n    public void pieMoveFailIfNotTurn2()  throws UnadmissibleMove {\r\n        Player player_1 = new Player(\"Player_1\");\r\n        Player player_2 = new Player(\"Player_2\");\r\n        GameController game = new GameController(player_1,player_2);\r\n\r\n        game.makeMove(new Move(1,1,game.currentPlayer()));\r\n\r\n        game.makeMove(new Move(2, 2, game.currentPlayer()));\r\n\r\n        assertThrows(UnadmissibleMove.class, game::applyPieMove);\r\n\r\n\r\n    }\r\n\r\n\r\n    @Test\r\n    public void pieRuleWrongPosition() throws UnadmissibleMove {\r\n        Player player_1 = new Player(\"Player_1\");\r\n        Player player_2 = new Player(\"Player_2\");\r\n        GameController game = new GameController(player_1,player_2);\r\n\r\n        game.makeMove(new Move(6,6,player_1));\r\n        Move WrongMove = new Move(7,7,player_2, true);\r\n        assertThrows(UnadmissibleMove.class, () -> game.makeMove(WrongMove));\r\n    }\r\n\r\n    @Test\r\n    public void escortRulePlace() throws UnadmissibleMove {\r\n        Player player_1 = new Player(\"Player_1\");\r\n        Player player_2 = new Player(\"Player_2\");\r\n        GameController game = new GameController(player_1,player_2);\r\n\r\n        game.makeMove( new Move(7, 9, player_1));\r\n        game.makeMove( new Move(0, 0, player_2));\r\n        game.makeMove( new Move(8, 8, player_1));\r\n\r\n        assertEquals(player_1, game.board().getPlayerAt(7,8));\r\n\r\n    }\r\n    @Test\r\n    public void escortRulePlaceEat() throws UnadmissibleMove {\r\n        Player player_1 = new Player(\"Player_1\");\r\n        Player player_2 = new Player(\"Player_2\");\r\n        GameController game = new GameController(player_1,player_2);\r\n\r\n        game.makeMove( new Move(7, 9, player_1));\r\n        game.makeMove( new Move(7, 8, player_2));\r\n        game.makeMove( new Move(8, 8, player_1));\r\n\r\n        assertEquals(player_1, game.board().getPlayerAt(7,8));\r\n\r\n    }\r\n\r\n    @Test\r\n    public void escortRulePlaceOnBlackCell() throws UnadmissibleMove {\r\n        Player player_1 = new Player(\"Player_1\");\r\n        Player player_2 = new Player(\"Player_2\");\r\n        GameController game = new GameController(player_1,player_2);\r\n\r\n        game.makeMove( new Move(7, 8, player_1));\r\n        game.makeMove( new Move(0, 0, player_2));\r\n        game.makeMove( new Move(6, 9, player_1));\r\n\r\n        assertEquals(player_1, game.board().getPlayerAt(7,9));\r\n    }\r\n\r\n    @Test\r\n    public void doubleEscortMoveBlackCell()  throws UnadmissibleMove {\r\n        Player player_1 = new Player(\"Player_1\");\r\n        Player player_2 = new Player(\"Player_2\");\r\n        GameController game = new GameController(player_1,player_2);\r\n\r\n        game.makeMove( new Move(6, 9, player_1));\r\n        game.makeMove( new Move(0, 0, player_2));\r\n        game.makeMove( new Move(8, 7, player_1));\r\n        game.makeMove( new Move(0, 1, player_2));\r\n        game.makeMove( new Move(7, 8, player_1));\r\n\r\n        assertEquals(player_1, game.board().getPlayerAt(7,9));\r\n        assertEquals(player_1, game.board().getPlayerAt(8,8));\r\n    }\r\n\r\n    @Test\r\n    public void noWinOnNewGame() throws UnadmissibleMove {\r\n        Player player_1 = new Player(\"Player_1\");\r\n        Player player_2 = new Player(\"Player_2\");\r\n        GameController game = new GameController(player_1,player_2);\r\n        assertFalse(game.winBoard(), \"No winner at start of the game\");\r\n    }\r\n\r\n    @Test\r\n    public void noWinAfterNonConnectingMoves()  throws UnadmissibleMove {\r\n        Player player_1 = new Player(\"Player_1\");\r\n        Player player_2 = new Player(\"Player_2\");\r\n        GameController game = new GameController(player_1,player_2);\r\n\r\n        game.makeMove( new Move(0, 0, game.currentPlayer()));\r\n        game.makeMove( new Move(7, 7, game.currentPlayer()));\r\n        game.makeMove( new Move(1, 0, game.currentPlayer()));\r\n\r\n        assertFalse(game.winBoard());\r\n    }\r\n\r\n    @Test\r\n    public void player1WinByConnectingTopBottom() {\r\n        Player player_1 = new Player(\"Player_1\");\r\n        Player player_2 = new Player(\"Player_2\");\r\n        GameController game = new GameController(player_1,player_2);\r\n        Board board = game.board();\r\n        for (int row=0; row<board.getRows(); row++) {\r\n            board.placeStone(row,0, player_1);\r\n        }\r\n\r\n        assertTrue(game.winBoard());\r\n    }\r\n\r\n    @Test\r\n    public void player2WinByConnectingLeftRight() throws UnadmissibleMove {\r\n        Player player_1 = new Player(\"Player_1\");\r\n        Player player_2 = new Player(\"Player_2\");\r\n        GameController game = new GameController(player_1,player_2);\r\n        Board board = game.board();\r\n\r\n        game.makeMove(new Move(5,5, game.currentPlayer()));\r\n        for (int col=0; col<board.getRows(); col++) {\r\n            board.placeStone(0, col, player_2);\r\n        }\r\n        assertTrue(game.winBoard());\r\n    }\r\n    @Test\r\n    public void player2Win() throws UnadmissibleMove {\r\n        Player player_1 = new Player(\"Player_1\");\r\n        Player player_2 = new Player(\"Player_2\");\r\n        GameController game = new GameController(player_1,player_2);\r\n        Board board = game.board();\r\n\r\n        game.makeMove(new Move(5,5, game.currentPlayer()));\r\n        for (int col=0; col<board.getRows(); col++) {\r\n            board.placeStone(7, col, player_2);\r\n        }\r\n        assertTrue(game.winBoard());\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/brique/GameControllerTest.java b/src/test/java/brique/GameControllerTest.java
--- a/src/test/java/brique/GameControllerTest.java	(revision 65702bbd74842902bfa1585f937232146a033043)
+++ b/src/test/java/brique/GameControllerTest.java	(date 1750772057828)
@@ -272,7 +272,7 @@
         Board board = game.board();
 
         game.makeMove(new Move(5,5, game.currentPlayer()));
-        for (int col=0; col<board.getRows(); col++) {
+        for (int col=0; col<board.getCols(); col++) {
             board.placeStone(0, col, player_2);
         }
         assertTrue(game.winBoard());
@@ -285,9 +285,22 @@
         Board board = game.board();
 
         game.makeMove(new Move(5,5, game.currentPlayer()));
-        for (int col=0; col<board.getRows(); col++) {
+        for (int col=0; col<board.getCols(); col++) {
             board.placeStone(7, col, player_2);
         }
         assertTrue(game.winBoard());
     }
+    @Test
+    public void player2WinNotConnected() throws UnadmissibleMove {
+        Player player_1 = new Player("Player_1");
+        Player player_2 = new Player("Player_2");
+        GameController game = new GameController(player_1,player_2);
+        Board board = game.board();
+
+        game.makeMove(new Move(5,5, game.currentPlayer()));
+        for (int col=0; col<board.getCols()-1; col++) {
+            board.placeStone(7, col, player_2);
+        }
+        assertFalse(game.winBoard());
+    }
 }
Index: src/main/java/brique/model/Board.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package brique.model;\r\n\r\nimport brique.controller.GameController;\r\n\r\npublic class Board {\r\n    private final int rows;\r\n    private final int cols;\r\n    private final Player[][] grid;\r\n    private final Player defaultPlayer = new Player(\"None\");\r\n\r\n    public Board(int size) {\r\n        this.rows = size;\r\n        this.cols = size;\r\n        this.grid = new Player[rows][cols];\r\n        for (int r = 0; r < rows; r++) {\r\n            for (int c = 0; c < cols; c++) {\r\n                grid[r][c] = defaultPlayer;\r\n            }\r\n        }\r\n    }\r\n\r\n    public Board() {\r\n        this(15); // default to 15×15\r\n    }\r\n\r\n    public int getRows() {\r\n        return rows;\r\n    }\r\n\r\n    public int getCols() {\r\n        return cols;\r\n    }\r\n\r\n    public boolean isFree(int row, int col) {\r\n        checkBounds(row, col);\r\n        return grid[row][col].equals(defaultPlayer);\r\n    }\r\n\r\n\r\n    public void placeStone(int row, int col, Player player) {\r\n        if (!isFree(row, col)) {\r\n            throw new IllegalArgumentException(\"Cell (\" + row + \",\" + col + \") is already occupied\");\r\n        }\r\n        grid[row][col] = player;\r\n    }\r\n    public void PlaceStonePieRule(int row, int col, Player player, boolean pie) {\r\n        grid[row][col] = player;\r\n    }\r\n    public void PlaceStoneEscortRule(int row, int col, Player player) {\r\n        Player current = getPlayerAt(row, col);\r\n        if (player.equals(current)) {\r\n            throw new IllegalArgumentException(\"You already have a stone at (\" + row + \",\" + col + \")\");\r\n        }\r\n        grid[row][col] = player;\r\n    }\r\n\r\n\r\n    public Player getPlayerAt(int row, int col) {\r\n        boundsWithin(row, col);\r\n        return grid[row][col];\r\n    }\r\n\r\n    public boolean boundsWithin(int row, int col) {\r\n        return row >= 0 && row < rows && col >= 0 && col < cols;\r\n    }\r\n\r\n    private void checkBounds(int row, int col) {\r\n        if(!boundsWithin(row, col)) {\r\n            throw new IllegalArgumentException(\"Invalid position (\" + row + \",\" + col + \")\");\r\n        }\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/brique/model/Board.java b/src/main/java/brique/model/Board.java
--- a/src/main/java/brique/model/Board.java	(revision 65702bbd74842902bfa1585f937232146a033043)
+++ b/src/main/java/brique/model/Board.java	(date 1750774208123)
@@ -63,12 +63,9 @@
     public boolean boundsWithin(int row, int col) {
         return row >= 0 && row < rows && col >= 0 && col < cols;
     }
-
-    private void checkBounds(int row, int col) {
-        if(!boundsWithin(row, col)) {
-            throw new IllegalArgumentException("Invalid position (" + row + "," + col + ")");
-        }
-    }
+    private void checkBounds(int row,int col){
+        if(!boundsWithin(row,col))
+            throw new IndexOutOfBoundsException("Invalid position (" + row +"," + col + ")");}
 
 
 }
