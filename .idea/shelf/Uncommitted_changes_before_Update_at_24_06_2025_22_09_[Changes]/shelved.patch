Index: src/test/java/brique/GameControllerTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package brique;\r\n\r\nimport brique.controller.GameController;\r\nimport brique.model.Board;\r\nimport brique.model.Move;\r\nimport brique.model.Player;\r\nimport brique.model.UnadmissibleMove;\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\n\r\nimport static org.junit.jupiter.api.Assertions.*;\r\n\r\n\r\npublic class GameControllerTest {\r\n\r\n    @Test\r\n    public void firstPlayerStartsTheGame() {\r\n        Player player_1 = new Player(\"Player_1\");\r\n        Player player_2 = new Player(\"Player_2\");\r\n        GameController gamecontroller = new GameController(player_1,player_2);\r\n\r\n        assertEquals(player_1, gamecontroller.currentPlayer());\r\n    }\r\n\r\n    @Test\r\n    public void boardInitialized() {\r\n        Player player_1 = new Player(\"Player_1\");\r\n        Player player_2 = new Player(\"Player_2\");\r\n\r\n        GameController gamecontroller = new GameController(player_1,player_2);\r\n\r\n        assertNotNull(gamecontroller.board());\r\n    }\r\n\r\n    @Test\r\n    public void boardIsEmptyAtStart() {\r\n        Player player_1 = new Player(\"Player_1\");\r\n        Player player_2 = new Player(\"Player_2\");\r\n\r\n        GameController game = new GameController(player_1,player_2);\r\n        Board board = game.board();\r\n\r\n        for (int row = 0; row< board.getRows(); row++) {\r\n            for (int col = 0; col < board.getCols(); col++) {\r\n                assertTrue(board.isFree(row, col),\r\n                        \"Expected cell (\" + row + \",\" + col + \") to be free\");\r\n            }\r\n        }\r\n    }\r\n\r\n    @Test\r\n    public void currentTurnCounter() {\r\n        Player player_1 = new Player(\"Player_1\");\r\n        Player player_2 = new Player(\"Player_2\");\r\n\r\n        GameController game = new GameController(player_1,player_2);\r\n\r\n        assertEquals(1, game.currentTurn());\r\n    }\r\n\r\n    @Test\r\n    public void alternatePlayerTurn() {\r\n        Player player_1 = new Player(\"Player_1\");\r\n        Player player_2 = new Player(\"Player_2\");\r\n        GameController game = new GameController(player_1,player_2);\r\n\r\n        assertEquals(player_1, game.currentPlayer());\r\n\r\n        game.setTurnForTest(2);\r\n        assertEquals(player_2, game.currentPlayer());\r\n    }\r\n\r\n    @Test\r\n    public void playerCanPlaceStoneFreeCell() throws UnadmissibleMove {\r\n        Player player_1 = new Player(\"Player_1\");\r\n        Player player_2 = new Player(\"Player_2\");\r\n        GameController game = new GameController(player_1,player_2);\r\n\r\n        assertTrue(game.makeMove(new Move(0,0,game.currentPlayer())));\r\n\r\n        assertEquals(player_1, game.board().getPlayerAt(0,0));\r\n\r\n    }\r\n\r\n    @Test\r\n    public void turnIncreasesAfterTurn() throws UnadmissibleMove {\r\n        Player player_1 = new Player(\"Player_1\");\r\n        Player player_2 = new Player(\"Player_2\");\r\n        GameController game = new GameController(player_1,player_2);\r\n\r\n        assertEquals(1, game.currentTurn());\r\n        assertTrue(game.makeMove(new Move(0,0,game.currentPlayer())));\r\n        assertEquals(2, game.currentTurn());\r\n        assertTrue(game.makeMove(new Move(0,1,game.currentPlayer())));\r\n        assertEquals(3, game.currentTurn());\r\n    }\r\n\r\n    @Test\r\n    public void currentPlayerChangeAfterMove() throws UnadmissibleMove {\r\n        Player player_1 = new Player(\"Player_1\");\r\n        Player player_2 = new Player(\"Player_2\");\r\n        GameController game = new GameController(player_1,player_2);\r\n\r\n        assertEquals(player_1, game.currentPlayer());\r\n        assertTrue(game.makeMove(new Move(0,0, game.currentPlayer())));\r\n        assertEquals(player_2, game.currentPlayer());\r\n    }\r\n\r\n    @Test\r\n    public void moveWrongIsRejected() throws UnadmissibleMove {\r\n        Player player_1 = new Player(\"Player_1\");\r\n        Player player_2 = new Player(\"Player_2\");\r\n        GameController game = new GameController(player_1,player_2);\r\n\r\n        Move invalidMove = new Move(0,0,player_2);\r\n        assertThrows(UnadmissibleMove.class, () -> game.makeMove(invalidMove));\r\n    }\r\n\r\n    @Test\r\n    public void placeStoneOnOccupiedCell() throws UnadmissibleMove {\r\n        Player player_1 = new Player(\"Player_1\");\r\n        Player player_2 = new Player(\"Player_2\");\r\n        GameController game = new GameController(player_1,player_2);\r\n\r\n        assertDoesNotThrow(() -> game.makeMove(new Move(0,0,player_1)));\r\n        assertThrows(UnadmissibleMove.class, () -> game.makeMove(new Move(0,0,player_2)));\r\n\r\n    }\r\n\r\n    @Test\r\n    public void pieRuleSuccess() throws UnadmissibleMove {\r\n        Player player_1 = new Player(\"Player_1\");\r\n        Player player_2 = new Player(\"Player_2\");\r\n        GameController game = new GameController(player_1, player_2);\r\n\r\n        game.makeMove(new Move(0, 0, player_1));\r\n        assertTrue(game.pieRuleAvailable());\r\n        game.applyPieMove();\r\n\r\n        Player new_player_1 = game.getFirstPlayer();\r\n        Player new_player_2 = game.getSecondPlayer();\r\n\r\n        assertEquals(player_2, new_player_1);\r\n        assertEquals(player_1, new_player_2);\r\n\r\n        assertEquals(game.currentPlayer(), new_player_2);\r\n        assertEquals(game.board().getPlayerAt(0,0), new_player_1);\r\n    }\r\n\r\n    @Test\r\n    public void pieMoveFailIfNotTurn2()  throws UnadmissibleMove {\r\n        Player player_1 = new Player(\"Player_1\");\r\n        Player player_2 = new Player(\"Player_2\");\r\n        GameController game = new GameController(player_1,player_2);\r\n\r\n        game.makeMove(new Move(1,1,game.currentPlayer()));\r\n\r\n        game.makeMove(new Move(2, 2, game.currentPlayer()));\r\n\r\n        assertThrows(UnadmissibleMove.class, game::applyPieMove);\r\n\r\n\r\n    }\r\n\r\n\r\n    @Test\r\n    public void pieRuleWrongPosition() throws UnadmissibleMove {\r\n        Player player_1 = new Player(\"Player_1\");\r\n        Player player_2 = new Player(\"Player_2\");\r\n        GameController game = new GameController(player_1,player_2);\r\n\r\n        game.makeMove(new Move(6,6,player_1));\r\n        Move WrongMove = new Move(7,7,player_2, true);\r\n        assertThrows(UnadmissibleMove.class, () -> game.makeMove(WrongMove));\r\n    }\r\n\r\n    @Test\r\n    public void escortRulePlace() throws UnadmissibleMove {\r\n        Player player_1 = new Player(\"Player_1\");\r\n        Player player_2 = new Player(\"Player_2\");\r\n        GameController game = new GameController(player_1,player_2);\r\n\r\n        game.makeMove( new Move(7, 9, player_1));\r\n        game.makeMove( new Move(0, 0, player_2));\r\n        game.makeMove( new Move(8, 8, player_1));\r\n\r\n        assertEquals(player_1, game.board().getPlayerAt(7,8));\r\n\r\n    }\r\n    @Test\r\n    public void escortRulePlaceEat() throws UnadmissibleMove {\r\n        Player player_1 = new Player(\"Player_1\");\r\n        Player player_2 = new Player(\"Player_2\");\r\n        GameController game = new GameController(player_1,player_2);\r\n\r\n        game.makeMove( new Move(7, 9, player_1));\r\n        game.makeMove( new Move(7, 8, player_2));\r\n        game.makeMove( new Move(8, 8, player_1));\r\n\r\n        assertEquals(player_1, game.board().getPlayerAt(7,8));\r\n\r\n    }\r\n\r\n    @Test\r\n    public void escortRulePlaceOnBlackCell() throws UnadmissibleMove {\r\n        Player player_1 = new Player(\"Player_1\");\r\n        Player player_2 = new Player(\"Player_2\");\r\n        GameController game = new GameController(player_1,player_2);\r\n\r\n        game.makeMove( new Move(7, 8, player_1));\r\n        game.makeMove( new Move(0, 0, player_2));\r\n        game.makeMove( new Move(6, 9, player_1));\r\n\r\n        assertEquals(player_1, game.board().getPlayerAt(7,9));\r\n    }\r\n\r\n    @Test\r\n    public void doubleEscortMoveBlackCell()  throws UnadmissibleMove {\r\n        Player player_1 = new Player(\"Player_1\");\r\n        Player player_2 = new Player(\"Player_2\");\r\n        GameController game = new GameController(player_1,player_2);\r\n\r\n        game.makeMove( new Move(6, 9, player_1));\r\n        game.makeMove( new Move(0, 0, player_2));\r\n        game.makeMove( new Move(8, 7, player_1));\r\n        game.makeMove( new Move(0, 1, player_2));\r\n        game.makeMove( new Move(7, 8, player_1));\r\n\r\n        assertEquals(player_1, game.board().getPlayerAt(7,9));\r\n        assertEquals(player_1, game.board().getPlayerAt(8,8));\r\n    }\r\n\r\n    @Test\r\n    public void noWinOnNewGame() throws UnadmissibleMove {\r\n        Player player_1 = new Player(\"Player_1\");\r\n        Player player_2 = new Player(\"Player_2\");\r\n        GameController game = new GameController(player_1,player_2);\r\n        assertFalse(game.winBoard(), \"No winner at start of the game\");\r\n    }\r\n\r\n    @Test\r\n    public void noWinAfterNonConnectingMoves()  throws UnadmissibleMove {\r\n        Player player_1 = new Player(\"Player_1\");\r\n        Player player_2 = new Player(\"Player_2\");\r\n        GameController game = new GameController(player_1,player_2);\r\n\r\n        game.makeMove( new Move(0, 0, game.currentPlayer()));\r\n        game.makeMove( new Move(7, 7, game.currentPlayer()));\r\n        game.makeMove( new Move(1, 0, game.currentPlayer()));\r\n\r\n        assertFalse(game.winBoard());\r\n    }\r\n\r\n    @Test\r\n    public void player1NotWinForAStone() {\r\n        Player player_1 = new Player(\"Player_1\");\r\n        Player player_2 = new Player(\"Player_2\");\r\n        GameController game = new GameController(player_1, player_2);\r\n        Board board = game.board();\r\n        for (int row = 0; row < board.getRows() - 1; row++) {\r\n            board.placeStone(new Move(row, 0, player_1));\r\n        }\r\n        assertFalse(game.winBoard());\r\n    }\r\n    @Test\r\n    public void player1WinByConnectingTopBottom() {\r\n        Player player_1 = new Player(\"Player_1\");\r\n        Player player_2 = new Player(\"Player_2\");\r\n        GameController game = new GameController(player_1,player_2);\r\n        Board board = game.board();\r\n        for (int row=0; row<board.getRows(); row++) {\r\n            board.placeStone(new Move(row,0, player_1));\r\n        }\r\n        assertTrue(game.winBoard());\r\n    }\r\n\r\n    @Test\r\n    public void player2WinByConnectingLeftRight() throws UnadmissibleMove {\r\n        Player player_1 = new Player(\"Player_1\");\r\n        Player player_2 = new Player(\"Player_2\");\r\n        GameController game = new GameController(player_1,player_2);\r\n        Board board = game.board();\r\n\r\n        game.makeMove(new Move(5,5, game.currentPlayer()));\r\n        for (int col=0; col<board.getRows(); col++) {\r\n            board.placeStone(new Move(0, col, player_2));\r\n        }\r\n        assertTrue(game.winBoard());\r\n    }\r\n    @Test\r\n    public void player2Win() throws UnadmissibleMove {\r\n        Player player_1 = new Player(\"Player_1\");\r\n        Player player_2 = new Player(\"Player_2\");\r\n        GameController game = new GameController(player_1,player_2);\r\n        Board board = game.board();\r\n\r\n        game.makeMove(new Move(5,5, game.currentPlayer()));\r\n        for (int col=0; col<board.getRows(); col++) {\r\n            board.placeStone(new Move(7, col, player_2));\r\n        }\r\n        assertTrue(game.winBoard());\r\n    }\r\n\r\n    @Test\r\n    public void player2SWin() throws UnadmissibleMove {\r\n        Player player_1 = new Player(\"Player_1\");\r\n        Player player_2 = new Player(\"Player_2\");\r\n        GameController game = new GameController(player_1,player_2, 7);\r\n        Board board = game.board();\r\n        int[][] pos_list = {\r\n                {1,0},{1,1},{1,2},{1,3},\r\n                                  {2,3},\r\n                      {3,1},{3,2},{3,3},\r\n                      {4,1},\r\n                      {5,1},{5,2},{5,3},{5,4},{5,5},{5,6}\r\n        };\r\n        game.makeMove(new Move(5,5, game.currentPlayer()));\r\n        for (int[] pos : pos_list) {\r\n            board.placeStone(new Move(pos[0], pos[1], player_2));\r\n        }\r\n        assertTrue(game.winBoard());\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/test/java/brique/GameControllerTest.java b/src/test/java/brique/GameControllerTest.java
--- a/src/test/java/brique/GameControllerTest.java	(revision e839715d7a67d9fe64b3b391673d788f9e665330)
+++ b/src/test/java/brique/GameControllerTest.java	(date 1750776709006)
@@ -314,7 +314,6 @@
                       {4,1},
                       {5,1},{5,2},{5,3},{5,4},{5,5},{5,6}
         };
-        game.makeMove(new Move(5,5, game.currentPlayer()));
         for (int[] pos : pos_list) {
             board.placeStone(new Move(pos[0], pos[1], player_2));
         }
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"eccd0ae8-9978-4013-8170-e1ed43453dab\" name=\"Changes\" comment=\"\" />\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"ExternalProjectsData\">\r\n    <projectState path=\"$PROJECT_DIR$\">\r\n      <ProjectState />\r\n    </projectState>\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 2\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2yeT13SvNUcOmfAHrpSZarhC603\" />\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">{\r\n  &quot;keyToString&quot;: {\r\n    &quot;Gradle.BoardTest.executor&quot;: &quot;Run&quot;,\r\n    &quot;Gradle.GameControllerTest.alternatePlayerTurn.executor&quot;: &quot;Debug&quot;,\r\n    &quot;Gradle.GameControllerTest.executor&quot;: &quot;Run&quot;,\r\n    &quot;Gradle.GameControllerTest.pieMoveFailIfNotTurn2.executor&quot;: &quot;Run&quot;,\r\n    &quot;Gradle.GameControllerTest.pieRuleFailAfterTurnTwo.executor&quot;: &quot;Run&quot;,\r\n    &quot;Gradle.GameControllerTest.pieRuleSuccess.executor&quot;: &quot;Run&quot;,\r\n    &quot;Gradle.GameControllerTest.pieRuleWrong.executor&quot;: &quot;Run&quot;,\r\n    &quot;Gradle.GameControllerTest.player2Win.executor&quot;: &quot;Run&quot;,\r\n    &quot;Gradle.GameControllerTest.player2WinNotConnected.executor&quot;: &quot;Run&quot;,\r\n    &quot;JUnit.GameControllerTest.executor&quot;: &quot;Run&quot;,\r\n    &quot;JUnit.GameControllerTest.player2SWin.executor&quot;: &quot;Run&quot;,\r\n    &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,\r\n    &quot;RunOnceActivity.git.unshallow&quot;: &quot;true&quot;,\r\n    &quot;git-widget-placeholder&quot;: &quot;main&quot;,\r\n    &quot;ignore.virus.scanning.warn.message&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.eslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.detected.package.tslint&quot;: &quot;true&quot;,\r\n    &quot;node.js.selected.package.eslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;node.js.selected.package.tslint&quot;: &quot;(autodetect)&quot;,\r\n    &quot;nodejs_package_manager_path&quot;: &quot;npm&quot;,\r\n    &quot;project.structure.last.edited&quot;: &quot;Project&quot;,\r\n    &quot;project.structure.proportion&quot;: &quot;0.0&quot;,\r\n    &quot;project.structure.side.proportion&quot;: &quot;0.0&quot;,\r\n    &quot;settings.editor.selected.configurable&quot;: &quot;preferences.pluginManager&quot;,\r\n    &quot;vue.rearranger.settings.migration&quot;: &quot;true&quot;\r\n  }\r\n}</component>\r\n  <component name=\"RunManager\" selected=\"JUnit.GameControllerTest\">\r\n    <configuration name=\"BoardTest\" type=\"GradleRunConfiguration\" factoryName=\"Gradle\" temporary=\"true\">\r\n      <ExternalSystemSettings>\r\n        <option name=\"executionName\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"externalSystemIdString\" value=\"GRADLE\" />\r\n        <option name=\"scriptParameters\" value=\"\" />\r\n        <option name=\"taskDescriptions\">\r\n          <list />\r\n        </option>\r\n        <option name=\"taskNames\">\r\n          <list>\r\n            <option value=\":test\" />\r\n            <option value=\"--tests\" />\r\n            <option value=\"&quot;brique.BoardTest&quot;\" />\r\n          </list>\r\n        </option>\r\n        <option name=\"vmOptions\" />\r\n      </ExternalSystemSettings>\r\n      <ExternalSystemDebugServerProcess>false</ExternalSystemDebugServerProcess>\r\n      <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>\r\n      <DebugAllEnabled>false</DebugAllEnabled>\r\n      <RunAsTest>true</RunAsTest>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"GameControllerTest.player2WinNotConnected\" type=\"GradleRunConfiguration\" factoryName=\"Gradle\" temporary=\"true\">\r\n      <ExternalSystemSettings>\r\n        <option name=\"executionName\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"externalSystemIdString\" value=\"GRADLE\" />\r\n        <option name=\"scriptParameters\" value=\"\" />\r\n        <option name=\"taskDescriptions\">\r\n          <list />\r\n        </option>\r\n        <option name=\"taskNames\">\r\n          <list>\r\n            <option value=\":test\" />\r\n            <option value=\"--tests\" />\r\n            <option value=\"&quot;brique.GameControllerTest.player2WinNotConnected&quot;\" />\r\n          </list>\r\n        </option>\r\n        <option name=\"vmOptions\" />\r\n      </ExternalSystemSettings>\r\n      <ExternalSystemDebugServerProcess>false</ExternalSystemDebugServerProcess>\r\n      <ExternalSystemReattachDebugProcess>true</ExternalSystemReattachDebugProcess>\r\n      <DebugAllEnabled>false</DebugAllEnabled>\r\n      <RunAsTest>true</RunAsTest>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"BoardTest\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"Brique.test\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"brique.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <option name=\"PACKAGE_NAME\" value=\"brique\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"brique.BoardTest\" />\r\n      <option name=\"TEST_OBJECT\" value=\"class\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"GameControllerTest\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"Brique.test\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"brique.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <option name=\"PACKAGE_NAME\" value=\"brique\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"brique.GameControllerTest\" />\r\n      <option name=\"TEST_OBJECT\" value=\"class\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"GameControllerTest.player2SWin\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"Brique.test\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"brique.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <option name=\"PACKAGE_NAME\" value=\"brique\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"brique.GameControllerTest\" />\r\n      <option name=\"METHOD_NAME\" value=\"player2SWin\" />\r\n      <option name=\"TEST_OBJECT\" value=\"method\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"JUnit.GameControllerTest\" />\r\n        <item itemvalue=\"JUnit.BoardTest\" />\r\n        <item itemvalue=\"JUnit.GameControllerTest.player2SWin\" />\r\n        <item itemvalue=\"Gradle.BoardTest\" />\r\n        <item itemvalue=\"Gradle.GameControllerTest.player2WinNotConnected\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-jdk-9823dce3aa75-fbdcb00ec9e3-intellij.indexing.shared.core-IU-251.26094.121\" />\r\n        <option value=\"bundled-js-predefined-d6986cc7102b-b26f3e71634d-JavaScript-IU-251.26094.121\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"eccd0ae8-9978-4013-8170-e1ed43453dab\" name=\"Changes\" comment=\"\" />\r\n      <created>1750193821358</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1750193821358</updated>\r\n      <workItem from=\"1750193822547\" duration=\"2831000\" />\r\n      <workItem from=\"1750233384327\" duration=\"26140000\" />\r\n      <workItem from=\"1750323945001\" duration=\"10599000\" />\r\n      <workItem from=\"1750371263119\" duration=\"523000\" />\r\n      <workItem from=\"1750405523348\" duration=\"2228000\" />\r\n      <workItem from=\"1750412724798\" duration=\"1943000\" />\r\n      <workItem from=\"1750423049197\" duration=\"4135000\" />\r\n      <workItem from=\"1750436832834\" duration=\"1455000\" />\r\n      <workItem from=\"1750493797653\" duration=\"20613000\" />\r\n      <workItem from=\"1750607199187\" duration=\"5330000\" />\r\n      <workItem from=\"1750684489069\" duration=\"5691000\" />\r\n      <workItem from=\"1750755136768\" duration=\"7245000\" />\r\n      <workItem from=\"1750769506527\" duration=\"900000\" />\r\n      <workItem from=\"1750771731283\" duration=\"3280000\" />\r\n    </task>\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision e839715d7a67d9fe64b3b391673d788f9e665330)
+++ b/.idea/workspace.xml	(date 1750795759357)
@@ -4,7 +4,10 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="eccd0ae8-9978-4013-8170-e1ed43453dab" name="Changes" comment="" />
+    <list default="true" id="eccd0ae8-9978-4013-8170-e1ed43453dab" name="Changes" comment="">
+      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/src/test/java/brique/GameControllerTest.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/test/java/brique/GameControllerTest.java" afterDir="false" />
+    </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
@@ -15,6 +18,16 @@
       <ProjectState />
     </projectState>
   </component>
+  <component name="ExternalProjectsManager">
+    <system id="GRADLE">
+      <state>
+        <task path="$PROJECT_DIR$">
+          <activation />
+        </task>
+        <projects_view />
+      </state>
+    </system>
+  </component>
   <component name="FileTemplateManagerImpl">
     <option name="RECENT_TEMPLATES">
       <list>
@@ -44,6 +57,7 @@
     &quot;Gradle.GameControllerTest.pieRuleWrong.executor&quot;: &quot;Run&quot;,
     &quot;Gradle.GameControllerTest.player2Win.executor&quot;: &quot;Run&quot;,
     &quot;Gradle.GameControllerTest.player2WinNotConnected.executor&quot;: &quot;Run&quot;,
+    &quot;JUnit.BoardTest.executor&quot;: &quot;Run&quot;,
     &quot;JUnit.GameControllerTest.executor&quot;: &quot;Run&quot;,
     &quot;JUnit.GameControllerTest.player2SWin.executor&quot;: &quot;Run&quot;,
     &quot;RunOnceActivity.ShowReadmeOnStart&quot;: &quot;true&quot;,
@@ -195,7 +209,7 @@
       <workItem from="1750684489069" duration="5691000" />
       <workItem from="1750755136768" duration="7245000" />
       <workItem from="1750769506527" duration="900000" />
-      <workItem from="1750771731283" duration="3280000" />
+      <workItem from="1750771731283" duration="9923000" />
     </task>
     <servers />
   </component>
